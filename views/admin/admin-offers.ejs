<%- include('../layout/adminHead') -%>

<!--wrapper-->
<div class="wrapper">
    <!--sidebar wrapper -->
    <%- include('../layout/adminSideWrapper') -%>
    <!--end sidebar wrapper -->
    
    <!--start header -->
    <%- include('../layout/adminHeaderNav') -%>
    <!--end header -->
    
    <!--start page wrapper -->
    <div class="page-wrapper">
        <div class="page-content">
            <!--breadcrumb-->
            <div class="page-breadcrumb d-none d-sm-flex align-items-center mb-3">
                <div class="breadcrumb-title pe-3">VISTAVOGUE</div>
                <div class="ps-3">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-0 p-0">
                            <li class="breadcrumb-item"><a href="/admin/dashboard"><i class="bx bx-home-alt"></i></a></li>
                            <li class="breadcrumb-item active" aria-current="page">Offer Management</li>
                        </ol>
                    </nav>
                </div>
                <div class="ms-auto">
                    <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#addOfferModal">
                        Add New Offer
                    </button>
                </div>
            </div>
            <!--end breadcrumb-->
            <% if(locals.success){ %>
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const success = "New Offer is Added";
                    showModals(success);
                });
            </script>
            <% }else if(locals.errorMssg){ %>
                <script>
                    document.addEventListener('DOMContentLoaded', function () {
                        const errorMssg = "with this category offer allready added";
                        showModals(errorMssg);
                    });
                </script>
            <% } %>
            <div class="card">
                <div class="card-body">
                    <div class="d-lg-flex align-items-center mb-4 gap-3">
                        <div class="position-relative">
                            <input type="text" id="offerSearchInput" class="form-control ps-5 radius-30" placeholder="Search Offer">
                            <span class="position-absolute top-50 product-show translate-middle-y"><i class="bx bx-search"></i></span>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table mb-0" id="offerTable">
                            <thead class="table-light">
                                <tr>
                                    <th>No.</th>
                                    <th>Category Name</th>
                                    <th>Offer Percentage</th>
                                    <th>Expiry Date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="offerTableBody">
                                <% offers.forEach((offer, index) => { %>
                                <tr data-id="<%= offer._id %>">
                                    <td><%= index + 1 %></td>
                                    <td><%= offer.categoryId.name %></td>
                                    <td><%= offer.offerPercentage %>%</td>
                                    <td><%= new Date(offer.expiryDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></td>
                                    <td>
                                        <button type="button" class="btn btn-warning btn-sm" onclick="openEditModal('<%= offer._id %>', '<%= offer.categoryId._id %>', '<%= offer.offerPercentage %>', '<%= offer.expiryDate %>')"  data-bs-toggle="modal" data-bs-target="#editOfferModal">Edit</button>
                                        <button type="button" class="btn btn-danger btn-sm" onclick="deleteOffer('<%= offer._id %>')">Delete</button>
                                    </td>
                                </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div>
                            <span>Showing <span id="startRecord">1</span> to <span id="endRecord">10</span> of <span id="totalRecords">100</span> entries</span>
                        </div>
                        <nav aria-label="Page navigation">
                            <ul class="pagination" id="paginationContainer">
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--end page wrapper -->
    
    <!--start overlay-->
    <div class="overlay toggle-icon"></div>
    <!--end overlay-->
    
    <!--Start Back To Top Button-->
    <a href="javaScript:;" class="back-to-top"><i class='bx bxs-up-arrow-alt'></i></a>
    <!--End Back To Top Button-->
    
    <footer class="page-footer">
        <p class="mb-0">Copyright Â© 2024. All right reserved.</p>
    </footer>
</div>
<!--end wrapper-->

<!-- Add Offer Modal -->
<div class="modal fade" id="addOfferModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Offer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addOfferForm" action="/admin/add-offer" method="POST">
                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Category Name</label>
                        <select class="form-select" name="categoryId" id="categorySelect" required>
                            <option value="" disabled selected>Select Category</option>
                            <% category.forEach((category) => { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                            <% }) %>
                        </select>
                        <div id="categorySelectError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="offerPercentage" class="form-label">Offer Percentage</label>
                        <input type="number" class="form-control" id="offerPercentage" name="offerPercentage" required>
                        <div id="offerPercentageError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="expiryDate" class="form-label">Expiry Date</label>
                        <input type="date" class="form-control" id="expiryDate" name="expiryDate" required>
                        <div id="expiryDateError" class="error-message text-danger"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-outline-primary" id="submitOfferBtn">Save Offer</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Offer Modal -->
<div class="modal fade" id="editOfferModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Offer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editOfferForm">
                    <input type="hidden" id="editOfferId" name="offerId">
                    <input type="hidden" name="existCategory" value="<%= offers.categoryId %>">
                    <div class="mb-3">
                        <label for="editCategoryName" class="form-label">Category</label>
                        <select class="form-select" name="categoryId" id="editCategorySelect" required>
                            <option value="" disabled selected>Select Category</option>
                            <% category.forEach((data) => { %>
                            <option value="<%= data._id %>"><%= data.name %></option>
                            <% }) %>
                        </select>
                        <div id="editCategorySelectError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="editOfferPercentage" class="form-label">Offer Percentage</label>
                        <input type="number" class="form-control" id="editOfferPercentage" name="offerPercentage" placeholder="Enter the offer Percentage" required>
                        <div id="editOfferPercentageError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="editExpiryDate" class="form-label">Expiry Date</label>
                        <input type="date" class="form-control" id="editExpiryDate" name="expiryDate" required>
                        <div id="editExpiryDateError" class="error-message text-danger"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-outline-primary" id="updateOfferBtn" onclick="updateOffer()">Save Changes</button>
            </div>
        </div>
    </div>
</div>


<!-- Bootstrap JS -->
<script src="/assets/js/bootstrap.bundle.min.js"></script>
<!--plugins-->
<script src="/assets/js/jquery.min.js"></script>
<script src="/assets/plugins/simplebar/js/simplebar.min.js"></script>
<script src="/assets/plugins/metismenu/js/metisMenu.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script src="/assets/plugins/perfect-scrollbar/js/perfect-scrollbar.js"></script>
<!--app JS-->
<script src="/assets/js/app.js"></script>
<script>
    function showModals(success) {
        Toastify({
            text: success,
            duration: 3000,
            newWindow: true,
            close: true,
            gravity: "top",
            position: "center",
            stopOnFocus: true,
            style: {    
                background: "green",
            },
            onClick: function(){} // Callback after click
        }).showToast();
    }
    function showModals(errorMssg) {
        Toastify({
            text: errorMssg,
            duration: 3000,
            newWindow: true,
            close: true,
            gravity: "top",
            position: "center",
            stopOnFocus: true,
            style: {    
                background: "red",
            },
            onClick: function(){} // Callback after click
        }).showToast();
    }

    document.addEventListener('DOMContentLoaded', function () {
        const categorySelect = document.getElementById('categorySelect');
        const offerPercentageInput = document.getElementById('offerPercentage');
        const expiryDateInput = document.getElementById('expiryDate');
        const submitOfferBtn = document.getElementById('submitOfferBtn');
        const searchInput = document.getElementById('offerSearchInput');
        const table = document.getElementById('offerTable');

        categorySelect.addEventListener('change', validateForm);

        offerPercentageInput.addEventListener('input', validateForm);

        expiryDateInput.addEventListener('input', validateForm);

        document.getElementById('addOfferForm').addEventListener('submit', function (event) {
            if (!validateForm()) {
                event.preventDefault(); // Prevent form submission if validation fails
            }
        });

        // Filtering
        searchInput.addEventListener('keyup', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = table.querySelectorAll('tbody tr');

            rows.forEach((row, index) => {
                const text = row.textContent.toLowerCase();
                const display = text.includes(searchTerm) ? '' : 'none';
                row.style.display = display;

                // Update the numbering for visible rows
                if (display === '') {
                    row.cells[0].textContent = index + 1;
                }
            });
        });

        function validateCategory() {
            const selectedCategory = categorySelect.value;
            const categoryError = document.getElementById('categorySelectError');

            if (selectedCategory === '') {
                categoryError.textContent = 'Please select a category.';
                return false;
            } else {
                categoryError.textContent = '';
                return true;
            }
        }

        function validateOfferPercentage() {
            const offerPercentage = parseFloat(offerPercentageInput.value);
            const offerPercentageError = document.getElementById('offerPercentageError');

            if (isNaN(offerPercentage) || offerPercentage <= 0) {
                offerPercentageError.textContent = 'Offer percentage must be greater than 0.';
                return false;
            } else {
                offerPercentageError.textContent = '';
                return true;
            }
        }


        function validateExpiryDate() {
            const expiryDate = new Date(expiryDateInput.value);
            const currentDate = new Date();
            const expiryDateError = document.getElementById('expiryDateError');

            if (isNaN(expiryDate.getTime()) || expiryDate < currentDate) {
                expiryDateError.textContent = 'Expiry date must be greater than the present date.';
                return false;
            } else {
                expiryDateError.textContent = '';
                return true;
            }
        }


        function validateForm() {
            const isCategoryValid = validateCategory();
            const isOfferPercentageValid = validateOfferPercentage();
            const isExpiryDateValid = validateExpiryDate();

            const isFormValid = isCategoryValid && isOfferPercentageValid && isExpiryDateValid;

            submitOfferBtn.disabled = !isFormValid;

            return isFormValid;
        }
    });

    function openEditModal(offerId, categoryId, offerPercentage, expiryDate) {
        document.getElementById('editOfferId').value = offerId;
        document.getElementById('editCategorySelect').value = categoryId;
        document.getElementById('editOfferPercentage').value = offerPercentage;
        
        const formattedDate = new Date(expiryDate).toISOString().split('T')[0];
        document.getElementById('editExpiryDate').value = formattedDate;
    }

    console.log('Sending data:', { editOfferId, editCategorySelect, editOfferPercentage, editExpiryDate });


    function updateOffer() {
        const editOfferId = document.getElementById('editOfferId').value;
        const editCategorySelect = document.getElementById('editCategorySelect').value;
        const editOfferPercentage = document.getElementById('editOfferPercentage').value;
        const editExpiryDate = document.getElementById('editExpiryDate').value;

        if (validateEditForm()) {
            console.log("seeeening");
            fetch(`/admin/edit-offer/${editOfferId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    categoryId: editCategorySelect,
                    offerPercentage: editOfferPercentage,
                    expiryDate: editExpiryDate
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log('Server response:', data);
                if (data.success) {
                    showModals('Offer updated successfully');
                    $('#editOfferModal').modal('hide');
                    location.reload();
                } else {
                    showModals('Failed to update offer');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showModals('Error occurred while updating offer');
            });
        }
    }

    function validateEditForm() {
        const editCategorySelect = document.getElementById('editCategorySelect');
        const editOfferPercentage = document.getElementById('editOfferPercentage');
        const editExpiryDate = document.getElementById('editExpiryDate');

        const isEditCategoryValid = validateEditCategory();
        const isEditOfferPercentageValid = validateEditOfferPercentage();
        const isEditExpiryDateValid = validateEditExpiryDate();

        return isEditCategoryValid && isEditOfferPercentageValid && isEditExpiryDateValid;
    }

    function validateEditCategory() {
        const selectedCategory = document.getElementById('editCategorySelect').value;
        const categoryError = document.getElementById('editCategorySelectError');

        if (selectedCategory === '') {
            categoryError.textContent = 'Please select a category.';
            return false;
        } else {
            categoryError.textContent = '';
            return true;
        }
    }

    function validateEditOfferPercentage() {
        const offerPercentage = parseFloat(document.getElementById('editOfferPercentage').value);
        const offerPercentageError = document.getElementById('editOfferPercentageError');

        if (isNaN(offerPercentage) || offerPercentage <= 0) {
            offerPercentageError.textContent = 'Offer percentage must be greater than 0.';
            return false;
        } else {
            offerPercentageError.textContent = '';
            return true;
        }
    }

    function validateEditExpiryDate() {
        const expiryDate = new Date(document.getElementById('editExpiryDate').value);
        const currentDate = new Date();
        const expiryDateError = document.getElementById('editExpiryDateError');

        if (isNaN(expiryDate.getTime()) || expiryDate < currentDate) {
            expiryDateError.textContent = 'Expiry date must be greater than the present date.';
            return false;
        } else {
            expiryDateError.textContent = '';
            return true;
        }
    }

    function removeOfferFromTable(offerId) {
    const table = document.getElementById('offerTable').getElementsByTagName('tbody')[0];
    const rows = table.getElementsByTagName('tr');
    for (let i = 0; i < rows.length; i++) {
        if (rows[i].getAttribute('data-id') === offerId) {
            table.deleteRow(i);
            break;
        }
    }
}

    let currentPage = 1;
    const itemsPerPage = 10;
    let allOffers = [];

    function initializeOffers() {
        allOffers = Array.from(document.querySelectorAll('#offerTable tbody tr')).map(row => ({
            id: row.getAttribute('data-id'),
            categoryName: row.cells[1].textContent,
            offerPercentage: row.cells[2].textContent,
            expiryDate: row.cells[3].textContent,
            actions: row.cells[4].innerHTML
        }));
        
        displayOffers();
        updatePagination();
    }

    // Function to display offers for the current page
    function displayOffers() {
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const pageOffers = allOffers.slice(startIndex, endIndex);

        const tableBody = document.getElementById('offerTableBody');
        tableBody.innerHTML = '';
        
        pageOffers.forEach((offer, index) => {
            const row = `
                <tr data-id="${offer.id}">
                    <td>${startIndex + index + 1}</td>
                    <td>${offer.categoryName}</td>
                    <td>${offer.offerPercentage}</td>
                    <td>${offer.expiryDate}</td>
                    <td>${offer.actions}</td>
                </tr>
            `;
            tableBody.innerHTML += row;
        });

        updateShowingEntries();
    }
    // Function to update pagination controls
    function updatePagination() {
        const totalPages = Math.ceil(allOffers.length / itemsPerPage);
        const paginationContainer = document.getElementById('paginationContainer');
        paginationContainer.innerHTML = '';

        // Previous button
        paginationContainer.innerHTML += `
            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Previous</a>
            </li>
        `;

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            paginationContainer.innerHTML += `
                <li class="page-item ${i === currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                </li>
            `;
        }

        // Next button
        paginationContainer.innerHTML += `
            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Next</a>
            </li>
        `;
    }

    // Function to change page
    function changePage(page) {
        const totalPages = Math.ceil(allOffers.length / itemsPerPage);
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        displayOffers();
        updatePagination();
    }

    // Function to update "Showing X to Y of Z entries" text
    function updateShowingEntries() {
        const totalOffers = allOffers.length;
        const start = (currentPage - 1) * itemsPerPage + 1;
        const end = Math.min(currentPage * itemsPerPage, totalOffers);
        document.getElementById('startRecord').textContent = start;
        document.getElementById('endRecord').textContent = end;
        document.getElementById('totalRecords').textContent = totalOffers;
    }
    

    // Initialize offers and pagination when the page loads
    document.addEventListener('DOMContentLoaded', function() {
        initializeOffers();
        // ... (other event listeners and initializations)
    });

    function deleteOffer(id){
            Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if(result.isConfirmed){
                fetch(`/admin/delete-offer/${id}`,{
                    method : 'DELETE',
                }).then(response => response.json())
                .then(data => {
                    if(data.success){
                        removeOfferFromTable(id);
                        Swal.fire(
                        'Deleted!',
                        data.message,
                        'success'
                    );
                }else{
                    throw new Error(data.message);
                }
            })
        }
    }).catch(error => {
        console.error('Error:', error);
        Swal.fire(
            'Error!',
            error.message || 'Failed to delete coupon',
            'error'
        );
    })
}
</script>
