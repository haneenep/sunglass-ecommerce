<!DOCTYPE html>
<html lang="zxx">

<head>
    <meta charset="UTF-8">
    <meta name="description" content="Male_Fashion Template">
    <meta name="keywords" content="Male_Fashion, unica, creative, html">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>vistaVogue</title>

    <!-- Google Font -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap"
    rel="stylesheet">

    <!-- Css Styles -->
    <link rel="stylesheet" href="/stylesheets/bootstrap.min.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/elegant-icons.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/magnific-popup.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/nice-select.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/owl.carousel.min.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/slicknav.min.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/style1.css" type="text/css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script> 
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.7.6/lottie.min.js"></script>
    

<style>

    .dropdown {
    position: relative;
    display: inline-block;
    }

    .dropdown-toggle {
    background-color: black;
    color: white;
    padding: 10px 20px;
    border: none;
    cursor: pointer;
    border-radius: 4px;
    }

    .dropdown-toggle:focus {
    outline: none;
    }

    .dropdown-menu {
    display: none;
    position: absolute;
    background-color: white;
    min-width: 160px;
    box-shadow: 0px 8px 16px rgba(255, 255, 255, 0.2);
    z-index: 1;
    border-radius: 4px;
    }

    .dropdown-toggle::after {
    content: none !important;
    }

    .dropdown-menu a {
    color: rgb(255, 255, 255);
    padding: 12px 16px;
    text-decoration: none;
    display: block;
    }

    .dropdown-menu a:hover {
    background-color: #179500;
    }
    .pro-qty-2 {
        display: flex;
        align-items: center;
    }

    .qtybtn {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
        padding: 0 10px;
    }

    .qtybtn:disabled {
        color: grey;
        cursor: not-allowed;
    }

    .pro-qty-2 input {
        width: 40px;
        text-align: center;
        border: none;
        font-size: 16px;
    }

    .spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(0, 0, 0, 0.3);
        border-radius: 50%;
        border-top-color: #000;
        animation: spin 1s ease-in-out infinite;
        -webkit-animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
        to { -webkit-transform: rotate(360deg); }
    }
    @-webkit-keyframes spin {
        to { -webkit-transform: rotate(360deg); }
    }
    .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 500px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close:hover,
.close:focus {
    color: #000;
    text-decoration: none;
    cursor: pointer;
}

.modal-buttons {
    display: flex;
    justify-content: flex-end;
    margin-top: 20px;
}

.modal-buttons button {
    margin-left: 10px;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.btn-remove {
    background-color: #f44336;
    color: white;
}

.btn-move {
    background-color: #4CAF50;
    color: white;
}

</style>

</head>

<body>

    <!-- Header Section Begin -->

    <%- include('../layout/userHeaderNav') -%>

    <!-- Header Section End -->

    <!-- Breadcrumb Section Begin -->
    <section class="breadcrumb-option">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="breadcrumb__text">
                        <h4>Shopping Cart</h4>
                        <div class="breadcrumb__links">
                            <a href="/">Home</a>
                            <a href="/products">Shop</a>
                            <span>Shopping Cart</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>   
    <!-- Breadcrumb Section End -->

    <!-- Shopping Cart Section Begin -->
    <section class="shopping-cart spad">
        <div class="container">
            <div class="row">
                <div class="col-lg-8">
                    <div class="shopping__cart__table">
                        <table>
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Total</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (cart && cart.products.length > 0) { %>
                                    <% cart.products.forEach(product => { %>
                                        <tr>
                                            <td class="product__cart__item">
                                                <div class="product__cart__item__pic" style="width: 30%;">
                                                    <img src="<%= product.productid.images[0] %>" alt="" loading="lazy">
                                                </div>
                                                <div class="product__cart__item__text">
                                                    <h6><%= product.productid.productName %></h6>
                                                    <% if(product.productid.inCategoryOffer || product.productid.discountAmount > 0) { %>
                                                            <h5>
                                                            <span class="discounted-price" style="color: red; font-weight: 700;">₹<%= product.productid?.discountedPrice.toFixed(2) %></span>
                                                            <span class="original-price" style="text-decoration: line-through;">₹<%= product.productid.price.toFixed(2) %></span>
                                                            </h5>
                                                    <% }else{ %>
                                                            <h5>₹<%= product.productid.price.toFixed(2) %></h5>
                                                    <% } %>
                                                </div>
                                            </td>
                                            <td class="quantity__item">
                                                <div class="quantity">
                                                    <div class="pro-qty-2" data-max-quantity="<%= product.productid.stockQuantity %>" data-product-id="<%= product.productid._id %>">
                                                    <button class="decr qtybtn" aria-label="Decrease quantity">❮</button>
                                                    <input type="text" value="<%= product.quantity %>" readonly>
                                                    <button class="inc qtybtn" aria-label="Increase quantity">❯</button>
                                                </div>
                                                </div>
                                            </td>
                                            <td class="cart__price" data-product-total="<%= product.productid._id %>">
                                                ₹<%= (product.quantity * (product.productid.inCategoryOffer || product.productid.discountAmount > 0 ? product.productid.discountedPrice : product.productid.price)).toFixed(2) %>
                                            </td>
                                            <td class="cart__close"><button style="border: none; border-radius: 30px;" class="remove-item"><i class="fa fa-close"></i></button></td>
                                        </tr>
                                    <% }) %>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-md-6 col-sm-6">
                            <div class="continue__btn">
                                <a href="/products">Continue Shopping</a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="cart__total">
                        <h6>Cart total</h6>
                        <ul>
                            <li>Subtotal <span id="cartSubtotal">₹<%= cart.subTotal.toFixed(2) %></span></li>
                            <li>Discount <span id="cartDiscount">-₹<%= cart.discount.toFixed(2) %></span></li>                            
                            <li>Total <span id="cartTotal">₹<%= cart.total.toFixed(2) %></span></li>
                            <li>Shipping Fee <span><del>₹40.00</del></span><span style="color: green;">Free</span></li>
                        </ul>
                        <a href="/checkOut" class="primary-btn">Proceed to checkout</a>
                    </div>
                </div>
            </div>
        </div>  
    </section>
    <!-- Shopping Cart Section End -->

    <!-- Remove Confirmation Modal -->
    <div id="removeModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Move from Bag</h2>
            <p>Are you sure you want to move this item from bag?</p>
            <div class="modal-buttons">
                <button class="btn-remove">Remove</button>
                <!-- <button class="btn-move">Move to Wishlist</button> -->
            </div>
        </div>
    </div>

    <!-- Footer Section Begin -->
    
    <%- include('../layout/userFooterNav') -%>

    <!-- Footer Section End -->

    <%- include('../layout/userFoot') -%>
<script>

document.addEventListener('DOMContentLoaded', (event) => {
    document.querySelectorAll('.pro-qty-2').forEach(quantityContainer => {
        const decrButton = quantityContainer.querySelector('.decr.qtybtn');
        const incButton = quantityContainer.querySelector('.inc.qtybtn');
        const input = quantityContainer.querySelector('input');
        const productId = quantityContainer.getAttribute('data-product-id');
        const productMaxQuantity = parseInt(quantityContainer.getAttribute('data-max-quantity'));
        const maxQuantity = Math.min(10, productMaxQuantity);

        const updateButtons = () => {
            let currentValue = parseInt(input.value);
            decrButton.disabled = currentValue <= 1;
            incButton.disabled = currentValue >= maxQuantity;
        };

        const showSpinner = () => {
            decrButton.disabled = true;
            incButton.disabled = true;
            input.style.display = 'none';
            const spinner = document.createElement('div');
            spinner.className = 'spinner';
            quantityContainer.appendChild(spinner);
        };

        const hideSpinner = () => {
            decrButton.disabled = false;
            incButton.disabled = false;
            input.style.display = 'inline-block';
            const spinner = quantityContainer.querySelector('.spinner');
            if (spinner) spinner.remove();
            updateButtons();
        };

    const updateCart = (newQuantity) => {
    showSpinner();
    fetch('/updateCart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId, quantity: newQuantity }),
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw new Error(err.message || 'Network response was not ok');
            });
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            document.getElementById('cartSubtotal').textContent = `₹${data.subtotal.toFixed(2)}`;
            document.getElementById('cartDiscount').textContent = `-₹${data.discount.toFixed(2)}`;
            document.getElementById('cartTotal').textContent = `₹${data.total.toFixed(2)}`;
            const productPriceElement = quantityContainer.closest('tr').querySelector('.product__cart__item__text h5 .discounted-price') || quantityContainer.closest('tr').querySelector('.product__cart__item__text h5');
            const productPrice = parseFloat(productPriceElement.textContent.replace('₹', ''));
            const newProductTotal = (newQuantity * productPrice).toFixed(2);
            const productTotalCell = document.querySelector(`[data-product-total="${productId}"]`);
            if (productTotalCell) {
                productTotalCell.textContent = `₹${newProductTotal}`;
            }
            showNotification('Cart updated successfully');
        } else {
            throw new Error(data.message || 'Failed to update cart');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification(error.message, true);
        input.value = newQuantity > input.value ? newQuantity - 1 : newQuantity + 1;
    })
    .finally(() => {
        hideSpinner();
    });
};


        decrButton.addEventListener('click', () => {
            let currentValue = parseInt(input.value);
            if (currentValue > 1) {
                input.value = currentValue - 1;
                updateCart(currentValue - 1);
            }
        });

        incButton.addEventListener('click', () => {
            let currentValue = parseInt(input.value);
            if (currentValue < maxQuantity) {
                input.value = currentValue + 1;
                updateCart(currentValue + 1);
            } else {
                showNotification("Product Quantity limit Exceed", true);
            }
        });

        updateButtons();
    });


    const removeButtons = document.querySelectorAll('.remove-item');
    const modal = document.getElementById('removeModal');
    const closeModal = document.querySelector('.close');
    let currentProductRow;

    removeButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            currentProductRow = event.target.closest('tr');
            modal.style.display = 'block';
        });
    });

    closeModal.addEventListener('click', (event) => {
        modal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
        if (event.target == modal) {
            modal.style.display = 'none';
        }
    });

    document.querySelector('.btn-remove').addEventListener('click', () => {
        const productId = currentProductRow.querySelector('.pro-qty-2').getAttribute('data-product-id');
        removeProductFromCart(productId);
        modal.style.display = 'none';
    });

    const updateCartTotals = (subtotal, total, isEmpty) => {
        const subtotalElement = document.querySelector('.cart__total li:nth-child(1) span');
        const totalElement = document.querySelector('.cart__total li:nth-child(3) span');

        if (subtotalElement) {
            subtotalElement.textContent = `₹${parseFloat(subtotal).toFixed(2)}`;
        }

        if (totalElement) {
            totalElement.textContent = `₹${parseFloat(total).toFixed(2)}`;
        }

        if (isEmpty) {
            window.location.href = '/emptyCart';
        }
    };

    const removeProductFromCart = (productId) => {
        fetch(`/removeFromCart/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(`Server responded with ${response.status}: ${text}`);
                });
            }
            return response.json();
        }).then(data => {
            if (data.success) {
                currentProductRow.remove();
                updateCartTotals(data.subtotal, data.total, data.isEmpty);
                showNotification('Product Removed From Cart');
            } else {
                showNotification(data.message || 'Failed to remove From Cart', true);
            }
        }).catch(error => {
            console.error('Error', error);
            showNotification(error.message, true);
        });
    };
    
    const showNotification = (message, isError = false , limit) => {
            Toastify({
                text: message,
                duration: 3000,
                close: true,
                gravity: "top",
                position: "right",
                backgroundColor: isError ? "red" : "green",
            }).showToast();
        };
});
    
        // const moveProductToWishlist = (productId) => {
        //     fetch('/moveToWishlist', {
        //         method: 'POST',
        //         headers: {
        //             'Content-Type': 'application/json',
        //         },
        //         body: JSON.stringify({ productId }),
        //     })
        //     .then(response => {
        //         if (!response.ok) {
        //             throw new Error('Network response was not ok');
        //         }
        //         return response.json();
        //     })
        //     .then(data => {
        //         if (data.success) {
        //             currentProductRow.remove();
        //             showNotification('Product moved to wishlist');
        //         } else {
        //             showNotification(data.message || 'Failed to move product', true);
        //         }
        //     })
        //     .catch(error => {
        //         console.error('Error:', error);
        //         showNotification(error.message, true);
        //     });
        // };


//         const showNotification = (message, isError = false , limit) => {
//             Toastify({
//                 text: message,
//                 duration: 3000,
//                 close: true,
//                 gravity: "top",
//                 position: "right",
//                 backgroundColor: isError ? "red" : "green",
//             }).showToast();
//         };

// });
</script>
    