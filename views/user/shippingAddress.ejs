<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="description" content="My Personal Information">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Address</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="/stylesheets/bootstrap.min.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/elegant-icons.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/magnific-popup.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/nice-select.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/owl.carousel.min.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/slicknav.min.css" type="text/css">
    <link rel="stylesheet" href="/stylesheets/style1.css" type="text/css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.7.6/lottie.min.js"></script>
    <style>
        body {
            font-family: 'Nunito Sans', sans-serif;
            background-color: #f8f9fa;
            margin: 0;
            padding: 0;
        }
        .page-container {
            display: flex;
            max-width: 1200px;
            margin: 40px auto;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .sidebar {
            width: 250px;
            padding: 30px;
            border-right: 1px solid #e0e0e0;
        }
        .sidebar h2 {
            font-size: 20px;
            font-weight: 700;
            margin-bottom: 20px;
        }
        .sidebar-nav {
            list-style-type: none;
            padding: 0;
        }
        .sidebar-nav li {
            margin-bottom: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        .sidebar-nav a {
            color: #333;
            text-decoration: none;
            display: flex;
            padding: 10px;
            align-items: center;
            border-radius: 4px;
        }
        .sidebar-nav a:hover {
            background-color: #f0f0f0;
        }
        .sidebar-nav a i {
            margin-right: 10px;
        }
        .main-content {
            flex-grow: 1;
            padding: 30px;
        }
        .info-header {
            margin-bottom: 30px;
        }
        .info-header h1 {
            font-size: 24px;
            font-weight: 700;
            margin: 0;
        }
        .info-item {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .info-item label {
            font-weight: 600;
            width: 120px;
            color: #666;
        }

        .info-item p {
            margin: 0;
            font-size: 16px;
        }

        .edit-btn {
            background-color: #ffffff;
            color: #333;
            border: 1px solid #ddd;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 14px;
            margin-left: 10px;
        }
        .address-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .address-card {
            background-color: #ffffff;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 20px;
            position: relative;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .address-card h3 {
            margin-top: 0;
            margin-bottom: 10px;
            color: #333;
            font-size: 18px;
        }
        .address-card p {
            margin: 5px 0;
            color: #666;
        }
        .edit-btn, .delete-btn {
            position: absolute;
            top: 10px;
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .edit-btn {
            right: 10px;
            background-color: #4CAF50;
            color: white;
        }
        .delete-btn {
            right: 70px;
            background-color: #f44336;
            color: white;
        }
        .add-address-btn {
            display: inline-block;
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #333;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        .edit-btn:hover, .delete-btn:hover {
            opacity: 0.8;
        }
        .add-address-btn:hover {
            background-color: #181818;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
            border-radius: 8px;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .form-row {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }
        .form-row input, .form-row select, textarea {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        textarea {
            width: 100%;
            height: 100px;
            resize: vertical;
        }
        .address-type {
            margin-top: 10px;
        }
        .radio-group {
            display: flex;
            gap: 20px;
        }
        button[type="submit"] {
            width: 100%;
            padding: 10px;
            background-color: #333;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
        }
        .dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-toggle {
  background-color: #179500;
  color: white;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
  border-radius: 4px;
}

.dropdown-toggle:focus {
  outline: none;
}

.dropdown-menu {
  display: none;
  position: absolute;
  background-color: white;
  min-width: 160px;
  box-shadow: 0px 8px 16px rgba(255, 255, 255, 0.2);
  z-index: 1;
  border-radius: 4px;
}

.dropdown-toggle::after {
        content: none !important;
    }

.dropdown-menu a {
  color: rgb(255, 255, 255);
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.dropdown-menu a:hover {
  background-color: #000000;
}
    </style>
</head>
<body>
    <!-- Header Section Begin -->

    <%- include('../layout/userHeaderNav') -%>

    <!-- Header Section End -->

    <div class="page-container">
        <!-- Sidebar Begin -->

        <%- include('../layout/userProfileSidebar') -%>


        <!-- Sidebar End -->

        <!-- Main Content Begin -->
        <div class="main-content">
            <div class="info-header">
                <h3>SHIPPING ADDRESSES</h3><hr>
            </div>
            <div class="address-grid">
                <% if(address && address.length > 0){ %>
                    <% address.forEach((addr) => { %>
                        <div class="address-card">
                            <h3><%= addr.addressType.toUpperCase() %></h3>
                            <p><strong><%= addr.name %></strong></p>
                            <p><%= addr.address %></p>
                            <p><%= addr.city %>, <%= addr.state %> <%= addr.pincode %></p>
                            <p><%= addr.locality %></p>
                            <p>Phone No : <%= addr.phoneNumber %></p>
                            <button class="edit-btn" onclick="openModal('edit', <%= JSON.stringify(addr)%>)">Edit</button>
                            <button class="delete-btn" onclick="deleteAddress('<%= addr._id %>')">Remove</button>
                        </div>
                    <% }) %>
                <% } else { %>
                    <p>No addresses found. Add a new address below.</p>
                <% } %>
            </div>
            <button class="add-address-btn" onclick="openModal()">Add New Address</button>
        </div>
        <!-- Main Content End -->
    </div>

    <!-- Address Form Modal -->
    <div id="addressModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2 id="modalTitle">Add Address</h2>
            <form id="addressForm">
                <div class="form-row">
                    <input type="hidden" id="addressId" name="addressId">
                    <input type="text" id="name" name="name" placeholder="name" required>
                    <input type="tel" id="phoneNumber" name="phoneNumber" placeholder="10-digit number" pattern="[0-9]{10}" required>
                </div>
                <div class="form-row">
                    <input type="text" id="pincode" name="pincode" placeholder="Pincode" required>
                    <input type="text" id="locality" name="locality" placeholder="Locality" required>
                </div>
                <textarea id="address" name="address" placeholder="Address (Area and Street)" required></textarea>
                <div class="form-row">
                    <input type="text" id="city" name="city" placeholder="City/District/Town" required>
                    <select id="state" name="state" required>
                        <option value="">Select State</option>
                        <option value="kerala">Kerala</option>
                        <option value="tamil nadu">tamil nadu</option>
                        <!-- Add state options here -->
                    </select>
                </div>
                <div class="address-type">
                    <p>Address type</p>
                    <div class="radio-group">
                        <input type="radio" id="homeType" name="addressType" value="HOME" checked>
                        <label for="homeType">HOME</label>
                        <input type="radio" id="workType" name="addressType" value="WORK">
                        <label for="workType">WORK</label>
                    </div>
                </div>
                <button type="submit" id="submitAddress">Add Address</button>
            </form>
        </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const modal = document.getElementById('addressModal');
        const closeBtn = modal.querySelector('.close');
        const form = document.getElementById('addressForm');
        const submitBtn = document.getElementById('submitAddress');
        const modalTitle = document.getElementById('modalTitle');

        function openModal(action, address = null) {
            modal.style.display = 'block';
            if (action === 'edit' && address) {
                modalTitle.textContent = 'Edit Address';
                submitBtn.textContent = 'Update Address';
                fillFormWithAddress(address);
            } else {
                modalTitle.textContent = 'Add Address';
                submitBtn.textContent = 'Add Address';
                form.reset();
                document.getElementById('addressId').value = '';
            }
        }

        function fillFormWithAddress(address) {
            document.getElementById('addressId').value = address._id;
            document.getElementById('name').value = address.name;
            document.getElementById('phoneNumber').value = address.phoneNumber;
            document.getElementById('pincode').value = address.pincode;
            document.getElementById('locality').value = address.locality;
            document.getElementById('address').value = address.address;
            document.getElementById('city').value = address.city;
            document.getElementById('state').value = address.state;
            document.getElementById(address.addressType.toLowerCase() + 'Type').checked = true;
        

              // Add a hidden input for the address ID
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'addressId';
            hiddenInput.value = address._id;
            form.appendChild(hiddenInput);
        }

        closeBtn.onclick = () => modal.style.display = 'none';
        window.onclick = (event) => {
            if (event.target == modal) modal.style.display = 'none';
        }

        form.onsubmit = async (e) => {
            e.preventDefault();

            const name = document.getElementById('name').value.trim();
            const phoneNumber = document.getElementById('phoneNumber').value.trim();
            const pincode = document.getElementById('pincode').value.trim();
            const locality = document.getElementById('locality').value.trim();
            const address = document.getElementById('address').value.trim();
            const city = document.getElementById('city').value.trim();
            const state = document.getElementById('state').value.trim();
            const addressType = document.querySelector('input[name="addressType"]:checked').value;

            const nameRegex = /^[a-zA-Z\s]+$/;
            const phoneRegex = /^[0-9]{10}$/;
            const pincodeRegex = /^[0-9]{6}$/;
            const locationRegex = /^[a-zA-Z\s]+$/;
            const cityRegex = /^[a-zA-Z\s]+$/;

            if (!nameRegex.test(name)) {
                showNotification('Please Provide a valid Input Name', true);
                return;
            }

            if (!phoneRegex.test(phoneNumber)) {
                showNotification('Phone number must contain 10 numeric characters', true);
                return;
            }

            if (!pincodeRegex.test(pincode)) {
                showNotification('Please Provide a valid Pincode.', true);
                return;
            }

            if (!locationRegex.test(locality)) {
                showNotification('Please Provide a valid Input location', true);
                return;
            }

            if (!address) {
                showNotification('Address should have between 40 and 50 characters.', true);
                return;
            }

            if (!cityRegex.test(city)) {
                showNotification('Please Provide a valid Input State/District/City.', true);
                return;
            }

            if (!state) {
                showNotification('State is required.', true);
                return;
            }

            const formData = new FormData(form);
            const addressData = Object.fromEntries(formData.entries());
            
            console.log('Address Data:', addressData);

            if (form.querySelector('#addressId')) {
                addressData._id = form.querySelector('#addressId').value;
            }
            
        try {
                const url = addressData.addressId ? '/editAddress' : '/addAddress';
                const method = addressData.addressId ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(addressData),
            });

            if (response.ok) {
                Swal.fire({
                position: "top-center",
                icon: "success",
                title: "successfully done",
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                location.reload()
            })

                } else {
                    showNotification('Failed to submit address. Please try again.', true);
                }
    } catch (error) {
        console.error('Error:', error);
        showNotification('An error occurred. Please try again.', true);
    }
}

    function deleteAddress(addressId) {
        Swal.fire({
           title: 'Are you sure?',
           text: "You won't be able to revert this!",
           icon: 'warning',
           showCancelButton: true,
           confirmButtonColor: '#3085d6',
           cancelButtonColor: '#d33',
           confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
               fetch(`/deleteAddress/${addressId}`, {
                   method: 'DELETE',
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                       Swal.fire(
                           'Deleted!',
                           'Your address has been deleted.',
                           'success'
                       ).then(() => {
                           location.reload();
                       });
                    } else {
                       Swal.fire(
                           'Error!',
                           'Failed to delete address.',
                           'error'
                       );
                   }
               })
               .catch(error => {
                   console.error('Error:', error);
                   Swal.fire(
                       'Error!',
                       'An error occurred while deleting the address.',
                       'error'
                   );
               });
           }
       });
   }

        const showNotification = (message, isError = false) => {
        Toastify({
        text: message,
        duration: 3000,
        close: true,
        gravity: "top",
        position: "right",
        backgroundColor: isError ? "red" : "green",
    }).showToast();
};
    </script>

    <!-- Footer Section Begin -->

    <%- include('../layout/userFooterNav') -%>


    <!-- Footer Section End -->

    <%- include('../layout/userFoot') -%>